//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "zmk-helpers/helper.h"

#define HM_TAPPING_TERM 180
#define HM_TAPPING_TERM_FAST 150
#define HM_PRIOR_IDLE 120
#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 40
#define COMBO_PRIOR_IDLE 80
#define BASE 0
#define NUMS 1
#define DANGER 2

/* use helper macros to define left and right hand keys */

#include "zmk-helpers/key-labels/totem.h"                                   // key-position labels
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

&lt { tapping-term-ms = <175>; };

/ {
    combos {
        compatible = "zmk,combos";

        //INFO: Brackets and braces

        combo_paren_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        combo_paren_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        combo_bracket_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <0 1>;
        };

        combo_bracket_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
        };

        combo_brace_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
        };

        combo_brace_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
        };

        //INFO: System commands

        combo_caps_word {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&caps_word>;
            key-positions = <19 10>;
        };

        combo_esc_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        combo_esc_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp ESCAPE>;
            key-positions = <17 16>;
        };

        combo_tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        combo_grave {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp GRAVE>;
            key-positions = <29 30>;
        };

        //INFO: Edit commands

        combo_undo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(Z)>;
            key-positions = <21 22>;
        };

        combo_redo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LS(LG(Z))>;
            key-positions = <24 25>;
        };

        combo_copy {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
        };

        combo_paste {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(V)>;
            key-positions = <23 24>;
        };

        //INFO: Special characters

        combo_quote {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <19 18>;
        };

        combo_underscore {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp UNDERSCORE>;
            key-positions = <3 13>;
        };

        combo_minus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp MINUS>;
            key-positions = <6 16>;
        };

        combo_plus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp PLUS>;
            key-positions = <7 17>;
        };

        combo_equal {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp EQUAL>;
            key-positions = <8 18>;
        };

        bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <20 31>;
            layers = <2>;
        };
    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_TAPPING_TERM_FAST>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_TAPPING_TERM_FAST>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BASE";
            bindings = <
       &kp Q          &kp W         &kp E         &kp R          &kp T        &kp Y      &kp U            &kp I         &kp O         &kp P
       &hm_l LCTRL A  &hm_l LALT S  &hm_l LGUI D  &hm_l LSHFT F  &kp G        &kp H      &hm_r RSHFT J    &hm_r RGUI K  &hm_r RALT L  &hm_r RCTRL SEMI
&kp Q  &kp Z          &kp X         &kp C         &kp V          &kp B        &kp N      &kp M            &kp COMMA     &kp DOT       &kp SLASH         &kp BACKSPACE
                                    &mo 2         &mo 1          &kp ENTER    &kp SPACE  &lt 2 BACKSPACE  &mo 2
            >;
        };

        raise_layer {
            display-name = "NUMS";
            bindings = <
              &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR          &kp RPAR
              &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp MINUS  &kp EQUAL  &kp GRAVE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp NUMBER_6  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp N9        &kp NUMBER_0    &kp UNDER  &kp PLUS   &kp TILDE  &kp PIPE          &kp BACKSLASH      &kp NUMBER_6
                                          &trans        &trans        &trans          &trans     &trans     &trans
            >;
        };

        lower_layer {
            display-name = "DANGER";
            bindings = <
              &kp F1        &kp F2        &kp F3          &kp F4        &kp F5              &kp F6    &kp F7             &kp F8           &kp F9     &kp F10
              &trans        &kp C_MUTE    &kp C_PREVIOUS  &kp C_NEXT    &kp C_PLAY_PAUSE    &kp LEFT  &kp DOWN           &kp UP           &kp RIGHT  &trans
&bt BT_SEL 0  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4        &trans    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans     &trans   &trans
                                          &trans          &trans        &trans              &trans    &trans             &trans
            >;
        };
    };
};
