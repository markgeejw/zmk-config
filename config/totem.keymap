//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "zmk-helpers/helper.h"

#define HM_TAPPING_TERM 180
#define HM_TAPPING_TERM_FAST 150
#define HM_PRIOR_IDLE 120
#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 40
#define COMBO_PRIOR_IDLE 80
#define ZMK_POINTING_DEFAULT_MOVE_VAL 900  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 900  // default: 10 - same as move for smooth scroll
#define BASE 0
#define NUMS 1
#define DANGER 2

/* use helper macros to define left and right hand keys */

#include "zmk-helpers/key-labels/totem.h"                                   // key-position labels
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

&lt { tapping-term-ms = <175>; };

/ {
    combos {
        compatible = "zmk,combos";

        //INFO: Brackets and braces

        combo_paren_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 3>;
        };

        combo_paren_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
        };

        combo_bracket_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <0 1>;
        };

        combo_bracket_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 9>;
        };

        combo_brace_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 2>;
        };

        combo_brace_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
        };

        //INFO: System commands

        combo_caps_word {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&caps_word>;
            key-positions = <19 10>;
        };

        combo_esc_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        combo_esc_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp ESCAPE>;
            key-positions = <17 16>;
        };

        combo_tab {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        combo_grave {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp GRAVE>;
            key-positions = <29 30>;
        };

        //INFO: Edit commands

        combo_undo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(Z)>;
            key-positions = <21 22>;
        };

        combo_redo {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LS(LG(Z))>;
            key-positions = <24 25>;
        };

        combo_copy {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
        };

        combo_paste {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp LG(V)>;
            key-positions = <23 24>;
        };

        //INFO: Special characters

        combo_quote {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <19 18>;
        };

        combo_underscore {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp UNDERSCORE>;
            key-positions = <3 13>;
        };

        combo_minus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp MINUS>;
            key-positions = <6 16>;
        };

        combo_plus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp PLUS>;
            key-positions = <7 17>;
        };

        combo_equal {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            bindings = <&kp EQUAL>;
            key-positions = <8 18>;
        };

        bt_clr {
            bindings = <&bt BT_CLR>;
            key-positions = <20 31>;
            layers = <6>;
        };
    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_TAPPING_TERM_FAST>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_TAPPING_TERM_FAST>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "BASE";
            bindings = <
         &kp Q          &kp W         &kp E         &kp R          &kp T        &kp Y        &kp U            &kp I         &kp O         &kp P
         &hm_l LCTRL A  &hm_l LALT S  &hm_l LGUI D  &hm_l LSHFT F  &kp G        &kp H        &hm_r RSHFT J    &hm_r RGUI K  &hm_r LALT L  &hm_r RCTRL SEMI
&kp TAB  &kp Z          &kp X         &kp C         &kp V          &kp B        &kp N        &kp M            &kp COMMA     &kp DOT       &kp SLASH         &kp SINGLE_QUOTE
                                      &lt 6 ESCAPE  &lt 1 SPACE    &lt 2 TAB    &lt 4 ENTER  &lt 3 BACKSPACE  &lt 5 DELETE
            >;
        };

        nav {
            bindings = <
        &trans     &trans    &trans    &trans     &trans    &kp K_REDO  &kp K_PASTE    &kp K_COPY   &kp K_CUT  &kp K_UNDO
        &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &trans    &kp LEFT    &kp DOWN       &kp UP       &kp RIGHT  &caps_word
&trans  &trans     &trans    &trans    &trans     &trans    &kp HOME    &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp INSERT  &trans
                             &trans    &trans     &trans    &kp ENTER   &kp BACKSPACE  &kp DELETE
            >;

            label = "NAV";
        };

        mouse {
            bindings = <
        &trans     &trans    &trans    &trans     &trans    &kp K_REDO      &kp K_PASTE     &kp K_COPY    &kp K_CUT        &kp K_UNDO
        &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans     &trans    &trans    &trans     &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans      &trans
                             &trans    &trans     &trans    &mkp RCLK       &mkp LCLK       &mkp MCLK
            >;

            label = "MOUSE";
        };

        numpad {
            display-name = "NUMPAD";
            bindings = <
           &kp LEFT_BRACKET  &kp N7  &kp N8      &kp N9          &kp RIGHT_BRACKET    &trans  &trans      &trans    &trans    &trans
           &kp SEMICOLON     &kp N4  &kp N5      &kp N6          &kp EQUAL            &trans  &kp LSHIFT  &kp RGUI  &kp LALT  &kp RCTRL
&kp ENTER  &kp GRAVE         &kp N1  &kp N2      &kp N3          &kp BACKSLASH        &trans  &trans      &trans    &trans    &trans     &trans
                                     &kp PERIOD  &lt 7 NUMBER_0  &kp MINUS            &trans  &trans      &trans
            >;
        };

        symbols {
            bindings = <
        &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &trans     &trans    &trans    &trans
        &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS           &trans  &kp RSHFT  &kp RGUI  &kp LALT  &kp RCTRL
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT                &kp HASH               &kp PIPE           &trans  &trans     &trans    &trans    &trans     &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE     &trans  &trans     &trans
            >;

            label = "SYMBOLS";
        };

        fun {
            display-name = "FUN";
            bindings = <
           &kp F12  &kp F1  &kp F2             &kp F3     &kp PRINTSCREEN    &trans  &trans      &trans    &trans    &trans
           &kp F11  &kp F4  &kp F5             &kp F6     &kp SCROLLLOCK     &trans  &kp LSHIFT  &kp RGUI  &kp LALT  &kp RCTRL
&kp ENTER  &kp F10  &kp F7  &kp F8             &kp F9     &kp PAUSE_BREAK    &trans  &trans      &trans    &trans    &trans     &trans
                            &kp K_APPLICATION  &kp SPACE  &kp TAB            &trans  &trans      &trans
            >;
        };

        adjust {
            bindings = <
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4    &trans  &trans           &trans    &trans    &trans
        &trans        &kp K_PREV    &kp C_VOL_DN  &kp C_VOLUME_UP   &kp K_NEXT      &trans  &kp RIGHT_SHIFT  &kp RGUI  &kp LALT  &kp RCTRL
&trans  &trans        &trans        &trans        &trans            &trans          &trans  &trans           &trans    &trans    &trans     &trans
                                    &kp K_MUTE    &kp K_PLAY_PAUSE  &kp K_STOP      &trans  &trans           &trans
            >;

            label = "ADJUST";
        };

        numrow {
            bindings = <
        &kp N1     &kp N2    &kp N3    &kp N4     &kp N5    &kp N6  &kp N7     &kp N8    &kp N9    &kp N0
        &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &trans    &trans  &kp RSHFT  &kp RGUI  &kp LALT  &kp RCTRL
&trans  &trans     &trans    &trans    &trans     &trans    &trans  &trans     &trans    &trans    &trans     &trans
                             &trans    &trans     &trans    &trans  &trans     &trans
            >;

            label = "NUMROW";
        };
    };
};
